var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ElementRef, ViewContainerRef, Renderer2, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ComponentBase, applyMixins, FormBase, setValue } from '@syncfusion/ej2-ng-base';
import { CheckBox } from '@syncfusion/ej2-buttons';
export var inputs = ['checked', 'cssClass', 'disabled', 'enablePersistence', 'enableRtl', 'indeterminate', 'label', 'labelPosition', 'locale', 'name', 'value'];
export var outputs = ['focus', 'blur', 'change', 'checkedChange', 'indeterminateChange'];
export var twoWays = ['checked', 'indeterminate'];
/**
 * Represents the Angular CheckBox Component.
 * ```html
 * <ejs-checkbox label='Default'></ejs-checkbox>
 * ```
 */
var CheckBoxComponent = /** @class */ (function (_super) {
    __extends(CheckBoxComponent, _super);
    function CheckBoxComponent(ngEle, srenderer, viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.ngEle = ngEle;
        _this.srenderer = srenderer;
        _this.viewContainerRef = viewContainerRef;
        _this.element = _this.ngEle.nativeElement;
        _this.injectedModules = _this.injectedModules || [];
        for (var i = 3; i < arguments.length; i++) {
            var injectedObj = arguments[i];
            if (injectedObj) {
                _this.injectedModules.push(injectedObj);
            }
        }
        _this.registerEvents(outputs);
        _this.addTwoWay.call(_this, twoWays);
        setValue('currentInstance', _this, _this.viewContainerRef);
        return _this;
    }
    CheckBoxComponent.prototype.registerOnChange = function (registerFunction) {
    };
    CheckBoxComponent.prototype.registerOnTouched = function (registerFunction) {
    };
    CheckBoxComponent.prototype.writeValue = function (value) {
    };
    CheckBoxComponent.prototype.setDisabledState = function (disabled) {
    };
    CheckBoxComponent.prototype.ngOnInit = function () {
    };
    CheckBoxComponent.prototype.ngAfterViewInit = function () {
    };
    CheckBoxComponent.prototype.ngOnDestroy = function () {
    };
    CheckBoxComponent.prototype.ngAfterContentChecked = function () {
    };
    CheckBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ejs-checkbox',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return CheckBoxComponent; }),
                            multi: true
                        }
                    ],
                    queries: {}
                },] },
    ];
    /** @nocollapse */
    CheckBoxComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ViewContainerRef, },
    ]; };
    return CheckBoxComponent;
}(CheckBox));
export { CheckBoxComponent };
applyMixins(CheckBoxComponent, [ComponentBase, FormBase]);
//# sourceMappingURL=checkbox.component.js.map